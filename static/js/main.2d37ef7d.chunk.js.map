{"version":3,"sources":["App.js","index.js"],"names":["highlightStyles","document","createElement","head","append","App","useState","fen","setFen","game","useRef","useEffect","current","Chess","greySquare","square","console","log","str","$","css","onMouseoutSquare","move","moves","verbose","length","i","removeGreySquares","to","highlightColor","charCodeAt","className","onClick","clear","reset","game_over","alert","darkSquareStyle","backgroundColor","dropSquareStyle","boxShadow","onMouseOverSquare","piece","onMouseOutSquare","onDragStart","source","turn","search","position","onDrop","sourceSquare","targetSquare","from","ReactDOM","render","StrictMode","getElementById"],"mappings":"4QAMMA,EAAkBC,SAASC,cAAc,SAC/CD,SAASE,KAAKC,OAAOJ,GAmHNK,MA/Gf,WACE,MAAmBC,mBAAS,SAA5B,mBAAOC,EAAP,KAAWC,EAAX,KAEIC,EAAOC,iBAAO,MAElBC,qBAAU,WACRF,EAAKG,QAAU,IAAIC,MACnB,IAEF,IAqBMC,EAAa,SAACC,GAElBC,QAAQC,IAAIF,GAKZ,IAAIG,EAAI,kBAAoBH,EAAQ,IACpCI,IAAED,GAAKE,IAAI,mBAAmB,0BAkB1BC,EAAkB,SAACN,GACvB,IAAIO,EAAKb,EAAKG,QAAQW,MAAM,CAC1BR,OAAQA,EACRS,SAAS,IAGX,GADAR,QAAQC,IAAIK,GACK,IAAdA,EAAKG,OAGR,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKG,OAAQC,IAC/BC,EAAkBL,EAAKI,GAAGE,KAGxBD,EAAkB,SAACZ,GACvB,IAAMc,EAAkBd,EAAOe,WAAW,GAAK,EAAMf,EAAOe,WAAW,GAAK,EAzExD,mBACA,OA4EhBZ,EAAI,kBAAoBH,EAAQ,IACpCI,IAAED,GAAKE,IAAI,mBAAmBS,IAehC,OACE,sBAAKE,UAAU,MAAf,UACE,wBAAQC,QAtEA,WACVvB,EAAKG,QAAQqB,QACbxB,EAAKG,QAAQsB,QACb1B,EAAO,UAmEL,sBAEEC,EAAKG,SAAWH,EAAKG,QAAQuB,YAC7BC,MAAM,aAAa,yBAEnB,qBAAKL,UAAU,YAAf,SACE,cAAC,IAAD,CACAM,gBAAiB,CAACC,gBAAgB,QAClCC,gBAAiB,CAACC,UAAW,2BAC7BC,kBA5DgB,SAAC1B,EAAO2B,GAC5B,IAAIpB,EAAKb,EAAKG,QAAQW,MAAM,CAC1BR,OAAQA,EACRS,SAAS,IAGX,GADAR,QAAQC,IAAIK,GACK,IAAdA,EAAKG,OAIR,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKG,OAAQC,IAC/BZ,EAAWQ,EAAKI,GAAGE,KAkDjBe,iBAAkBtB,EAClBuB,YAzBW,SAACC,EAAQH,GAE1B,OAAIjC,EAAK0B,gBAGY,MAAhB1B,EAAKqC,SAA0C,IAAxBJ,EAAMK,OAAO,OACpB,MAAhBtC,EAAKqC,SAA0C,IAAxBJ,EAAMK,OAAO,aADzC,IAqBMC,SAAUzC,EACV0C,OAhGK,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,aAAaC,EAAgB,EAAhBA,aAO1B,GANA9B,EAAiB6B,GAMP,OALDzC,EAAKG,QAAQU,KAAK,CACzB8B,KAAMF,EACNtB,GAAIuB,IAGS,OAAO,KACtB3C,EAAOC,EAAKG,QAAQL,gBCvBxB8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASuD,eAAe,W","file":"static/js/main.2d37ef7d.chunk.js","sourcesContent":["import Chess  from 'chess.js';\nimport Chessboard from 'chessboardjsx';\nimport { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport $ from 'jquery';\n\nconst highlightStyles = document.createElement('style');\ndocument.head.append(highlightStyles);\nconst whiteSquareGrey = 'rgb(240,217,181)';\nconst blackSquareGrey = 'gray';\n\nfunction App() {\n  const [fen,setFen]=useState(\"start\");\n\n  let game = useRef(null);\n\n  useEffect(()=>{\n    game.current = new Chess();\n  },[])\n\n  const onDrop=({sourceSquare,targetSquare})=>{\n    onMouseoutSquare(sourceSquare);\n    let move=game.current.move({\n      from: sourceSquare,\n      to: targetSquare\n    })\n    // console.log(move)\n    if(move===null)return null; //checks illegal moves\n    setFen(game.current.fen())\n\n  }\n\n\n  const reset=()=>{\n    game.current.clear();\n    game.current.reset();\n    setFen(\"start\")\n  }\n\n  /////////////////////////////////////\n \n  const greySquare = (square)=> {\n    // console.log(highlightStyles)\n    console.log(square)\n    // const highlightColor = (square.charCodeAt(0) % 2) ^ (square.charCodeAt(1) % 2)\n    //   ? whiteSquareGrey\n    //   : blackSquareGrey;\n    // console.log(highlightColor)\n    var str='[data-squareid=' + square +']'\n    $(str).css(\"background-color\",\"rgba(255, 255, 0, 0.5\")\n  };\n\n  const onMouseoverSquare=(square,piece)=>{\n      let move=game.current.moves({\n        square: square,\n        verbose: true\n      });\n      console.log(move)\n      if(move.length===0)return;\n\n      \n      // greySquare(square);\n      for (var i = 0; i < move.length; i++) {\n        greySquare(move[i].to);\n    }\n  }\n\n  const onMouseoutSquare =(square)=>{\n    let move=game.current.moves({\n      square: square,\n      verbose: true\n    });\n    console.log(move)\n    if(move.length===0)return;\n\n    // greySquare(square);\n    for (var i = 0; i < move.length; i++) {\n      removeGreySquares(move[i].to);\n  }\n  };\n  const removeGreySquares=(square)=>{\n    const highlightColor = (square.charCodeAt(0) % 2) ^ (square.charCodeAt(1) % 2)\n      ? whiteSquareGrey\n      : blackSquareGrey;\n    // console.log(highlightColor)\n    var str='[data-squareid=' + square +']'\n    $(str).css(\"background-color\",highlightColor)\n  }\n  \n  const onDragStart= (source, piece)=>{\n    // do not pick up pieces if the game is over\n    if (game.game_over()) return false\n\n    // or if it's not that side's turn\n    if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||\n        (game.turn() === 'b' && piece.search(/^w/) !== -1)) {\n      return false\n    }\n  }\n  /////////////////////////////////////\n\n  return (\n    <div className=\"App\">\n      <button onClick={reset}>New Game</button>\n      {\n        game.current && game.current.game_over() ?\n        alert(\"Game Over\"):<span></span>\n      }\n        <div className=\"container\">\n          <Chessboard\n          darkSquareStyle={{backgroundColor:\"gray\"}}\n          dropSquareStyle={{boxShadow: 'inset 0 0 1px 4px black'}}\n          onMouseOverSquare={onMouseoverSquare}\n          onMouseOutSquare={onMouseoutSquare}\n          onDragStart={onDragStart}\n          position={fen} \n          onDrop={onDrop}/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}