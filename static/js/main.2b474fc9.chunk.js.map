{"version":3,"sources":["App.js","index.js"],"names":["App","useState","turn","setTurn","fen","setFen","game","useRef","useEffect","current","Chess","greySquare","square","console","log","str","$","css","onMouseoutSquare","move","moves","verbose","length","i","removeGreySquares","to","className","style","backgroundColor","color","onClick","clear","reset","game_over","alert","darkSquareStyle","dropSquareStyle","boxShadow","onMouseOverSquare","piece","onMouseOutSquare","onDragStart","source","search","position","onDrop","sourceSquare","targetSquare","from","promotion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QA6HeA,MAvHf,WACE,MAAqBC,mBAAS,SAA9B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAmBF,mBAAS,SAA5B,mBAAOG,EAAP,KAAWC,EAAX,KAEIC,EAAOC,iBAAO,MAElBC,qBAAU,WACRF,EAAKG,QAAU,IAAIC,MACnB,IAEF,IA2BMC,EAAa,SAACC,GAElBC,QAAQC,IAAIF,GACZ,IAAIG,EAAI,kBAAoBH,EAAQ,IACpCI,IAAED,GAAKE,IAAI,YAAY,wCAkBnBC,EAAkB,SAACN,GACvB,IAAIO,EAAKb,EAAKG,QAAQW,MAAM,CAC1BR,OAAQA,EACRS,SAAS,IAGX,GADAR,QAAQC,IAAIK,GACK,IAAdA,EAAKG,OAGR,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKG,OAAQC,IAC/BC,EAAkBL,EAAKI,GAAGE,KAGxBD,EAAkB,SAACZ,GACvB,IAAIG,EAAI,kBAAoBH,EAAQ,IACpCI,IAAED,GAAKE,IAAI,YAAY,KAiBzB,OAHAJ,QAAQC,IAAIZ,GAIV,qBAAKwB,UAAU,MAAf,SAEI,sBAAKA,UAAU,YAAf,UACA,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,SAASC,MAAO,CAACC,gBAAgB1B,EAAK2B,MAAa,SAAN3B,EAAc,QAAQ,SAAlF,SACE,kDAEF,wBAAQ4B,QAtEJ,WACVxB,EAAKG,QAAQsB,QACbzB,EAAKG,QAAQuB,QACb3B,EAAO,UAmED,yBAIFC,EAAKG,SAAWH,EAAKG,QAAQwB,YAC7BC,MAAM,aAAa,yBAEjB,cAAC,IAAD,CACAC,gBAAiB,CAACP,gBAAgB,QAClCQ,gBAAiB,CAACC,UAAW,2BAC7BC,kBAjEgB,SAAC1B,EAAO2B,GAC5B,IAAIpB,EAAKb,EAAKG,QAAQW,MAAM,CAC1BR,OAAQA,EACRS,SAAS,IAGX,GADAR,QAAQC,IAAIK,GACK,IAAdA,EAAKG,OAIR,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKG,OAAQC,IAC/BZ,EAAWQ,EAAKI,GAAGE,KAuDjBe,iBAAkBtB,EAClBuB,YAlCW,SAACC,EAAQH,GAE1B,OAAIjC,EAAKG,QAAQwB,eAGY,MAAxB3B,EAAKG,QAAQP,SAA0C,IAAxBqC,EAAMI,OAAO,OACpB,MAAxBrC,EAAKG,QAAQP,SAA0C,IAAxBqC,EAAMI,OAAO,QA6B3CC,SAAUxC,EACVyC,OAvGK,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,aAAaC,EAAgB,EAAhBA,aAQ1B,GAPA7B,EAAiB4B,GAOP,OANDxC,EAAKG,QAAQU,KAAK,CACzB6B,KAAMF,EACNrB,GAAIsB,EACJE,UAAW,MAGE,OAAO,KACtB5C,EAAOC,EAAKG,QAAQL,OAIlBD,EADO,SAAND,EACO,QAEG,kBC1BjBgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2b474fc9.chunk.js","sourcesContent":["import Chess  from 'chess.js';\nimport Chessboard from 'chessboardjsx';\nimport { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport $ from 'jquery';\n\nfunction App() {\n  const [turn,setTurn]=useState(\"white\")\n  const [fen,setFen]=useState(\"start\");\n\n  let game = useRef(null);\n\n  useEffect(()=>{\n    game.current = new Chess();\n  },[])\n\n  const onDrop=({sourceSquare,targetSquare})=>{\n    onMouseoutSquare(sourceSquare);\n    let move=game.current.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q'    //used queen to for promotion for simplicity\n    })\n    // console.log(move)\n    if(move===null)return null; //checks illegal moves\n    setFen(game.current.fen())\n\n    // update turn\n    if(turn==\"white\"){\n      setTurn(\"black\")\n    }\n    else setTurn(\"white\")\n  }\n\n\n  const reset=()=>{\n    game.current.clear();\n    game.current.reset();\n    setFen(\"start\")\n  }\n\n  /////////////////////////////////////\n \n  const greySquare = (square)=> {\n    // console.log(highlightStyles)\n    console.log(square)\n    var str='[data-squareid=' + square +']'\n    $(str).css(\"boxShadow\",\"inset 0 0 1px 4px rgba(0,0,255,0.7)\")\n  };\n\n  const onMouseoverSquare=(square,piece)=>{\n      let move=game.current.moves({\n        square: square,\n        verbose: true\n      });\n      console.log(move)\n      if(move.length===0)return;\n\n      \n      // greySquare(square);\n      for (var i = 0; i < move.length; i++) {\n        greySquare(move[i].to);\n    }\n  }\n\n  const onMouseoutSquare =(square)=>{\n    let move=game.current.moves({\n      square: square,\n      verbose: true\n    });\n    console.log(move)\n    if(move.length===0)return;\n\n    // greySquare(square);\n    for (var i = 0; i < move.length; i++) {\n      removeGreySquares(move[i].to);\n  }\n  };\n  const removeGreySquares=(square)=>{\n    var str='[data-squareid=' + square +']'\n    $(str).css(\"boxShadow\",\"\")\n  }\n  \n  const onDragStart= (source, piece)=>{\n    // do not pick up pieces if the game is over\n    if (game.current.game_over()) return false\n\n    // or if it's not that side's turn\n    if ((game.current.turn() === 'w' && piece.search(/^b/) !== -1) ||\n        (game.current.turn() === 'b' && piece.search(/^w/) !== -1)) {\n      return false\n    }\n    else return true;\n  }\n  console.log(turn)\n  /////////////////////////////////////\n\n  return (\n    <div className=\"App\">\n      \n        <div className=\"container\">\n        <div className=\"turn\">\n          <div className=\"chance\" style={{backgroundColor:turn,color:(turn==\"white\"?\"black\":\"white\")}}>\n            <h2>Player to Move</h2>\n          </div>\n          <button onClick={reset}>New Game</button>\n        </div>\n        \n      {\n        game.current && game.current.game_over() ?\n        alert(\"Game Over\"):<span></span>\n      }\n          <Chessboard\n          darkSquareStyle={{backgroundColor:\"gray\"}}\n          dropSquareStyle={{boxShadow: 'inset 0 0 1px 4px black'}}\n          onMouseOverSquare={onMouseoverSquare}\n          onMouseOutSquare={onMouseoutSquare}\n          onDragStart={onDragStart}\n          position={fen} \n          onDrop={onDrop}/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}